[{"E:\\github\\gojs-layout-test\\src\\App.js":"1","E:\\github\\gojs-layout-test\\src\\SerpentineLayout.js":"2","E:\\github\\gojs-layout-test\\src\\index.js":"3","E:\\github\\gojs-layout-test\\src\\DoubleTreeLayout.js":"4","E:\\github\\gojs-layout-test\\src\\reportWebVitals.js":"5","E:\\github\\gojs-layout-test\\src\\ParallelLayout.js":"6","E:\\github\\gojs-layout-test\\src\\LineBreakLayout.js":"7","E:\\github\\gojs-layout-test\\src\\App2.js":"8","E:\\github\\gojs-layout-test\\src\\SwimLaneLayout.js":"9"},{"size":3066,"mtime":1609635855015,"results":"10","hashOfConfig":"11"},{"size":6274,"mtime":1609635445123,"results":"12","hashOfConfig":"11"},{"size":528,"mtime":1609654761546,"results":"13","hashOfConfig":"11"},{"size":8064,"mtime":1609661267581,"results":"14","hashOfConfig":"11"},{"size":362,"mtime":1609293478038,"results":"15","hashOfConfig":"11"},{"size":11881,"mtime":1609634685837,"results":"16","hashOfConfig":"11"},{"size":5161,"mtime":1609669687274,"results":"17","hashOfConfig":"11"},{"size":2854,"mtime":1609717196428,"results":"18","hashOfConfig":"11"},{"size":19348,"mtime":1609662017221,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"y7uphe",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\github\\gojs-layout-test\\src\\App.js",["40","41","42"],"E:\\github\\gojs-layout-test\\src\\SerpentineLayout.js",[],"E:\\github\\gojs-layout-test\\src\\index.js",["43"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport App2 from './App2';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App2 />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","E:\\github\\gojs-layout-test\\src\\DoubleTreeLayout.js",[],"E:\\github\\gojs-layout-test\\src\\reportWebVitals.js",[],"E:\\github\\gojs-layout-test\\src\\ParallelLayout.js",["44","45","46","47","48"],"E:\\github\\gojs-layout-test\\src\\LineBreakLayout.js",["49"],"import go from 'gojs';\r\n\r\nfunction LineBreakLayout() {\r\n  go.TreeLayout.call(this);\r\n  /* this._vertical = false;\r\n  this._directionFunction = function (node) {\r\n    return true;\r\n  };\r\n  this._bottomRightOptions = null;\r\n  this._topLeftOptions = null; */\r\n}\r\ngo.Diagram.inherit(LineBreakLayout, go.TreeLayout);\r\n\r\n/* Object.defineProperty(LineBreakLayout.prototype, 'vertical', {\r\n  get: function () {\r\n    return this._vertical;\r\n  },\r\n  set: function (val) {\r\n    if (typeof val !== 'boolean')\r\n      throw new Error(\r\n        'new value for LineBreakLayout.vertical must be a boolean value.'\r\n      );\r\n    if (this._vertical !== val) {\r\n      this._vertical = val;\r\n      this.invalidateLayout();\r\n    }\r\n  },\r\n});\r\n\r\nObject.defineProperty(LineBreakLayout.prototype, 'directionFunction', {\r\n  get: function () {\r\n    return this._directionFunction;\r\n  },\r\n  set: function (val) {\r\n    if (typeof val !== 'function') {\r\n      throw new Error(\r\n        'new value for LineBreakLayout.directionFunction must be a function taking a node data object and returning a boolean.'\r\n      );\r\n    }\r\n    if (this._directionFunction !== val) {\r\n      this._directionFunction = val;\r\n      this.invalidateLayout();\r\n    }\r\n  },\r\n});\r\n\r\nObject.defineProperty(LineBreakLayout.prototype, 'bottomRightOptions', {\r\n  get: function () {\r\n    return this._bottomRightOptions;\r\n  },\r\n  set: function (value) {\r\n    if (this._bottomRightOptions !== value) {\r\n      this._bottomRightOptions = value;\r\n      this.invalidateLayout();\r\n    }\r\n  },\r\n});\r\n\r\nObject.defineProperty(LineBreakLayout.prototype, 'topLeftOptions', {\r\n  get: function () {\r\n    return this._topLeftOptions;\r\n  },\r\n  set: function (value) {\r\n    if (this._topLeftOptions !== value) {\r\n      this._topLeftOptions = value;\r\n      this.invalidateLayout();\r\n    }\r\n  },\r\n}); */\r\n\r\nLineBreakLayout.prototype.cloneProtected = function (copy) {\r\n  go.TreeLayout.prototype.cloneProtected.call(this, copy);\r\n  /* copy._vertical = this._vertical;\r\n  copy._directionFunction = this._directionFunction;\r\n  copy._bottomRightOptions = this._bottomRightOptions;\r\n  copy._topLeftOptions = this._topLeftOptions; */\r\n};\r\n\r\nLineBreakLayout.prototype.doLayout = function (coll) {\r\n  coll = this.collectParts(coll);\r\n  if (coll.count === 0) {\r\n    return;\r\n  }\r\n  var diagram = this.diagram;\r\n  if (diagram !== null) {\r\n    diagram.startTransaction('Double Tree Layout');\r\n  }\r\n\r\n  var leftParts = new go.Set();\r\n  var rightParts = new go.Set();\r\n  this.separatePartsForLayout(coll, leftParts, rightParts);\r\n\r\n  /* var layout1 = this.createTreeLayout(false);\r\n  layout1.angle = this.vertical ? 270 : 180;\r\n  layout1.arrangement = go.TreeLayout.ArrangementFixedRoots;\r\n  layout1.doLayout(leftParts); */\r\n\r\n  var layout2 = this.createTreeLayout(true);\r\n  layout2.angle = this.vertical ? 90 : 0;\r\n  layout2.arrangement = go.TreeLayout.ArrangementFixedRoots;\r\n  layout2.doLayout(rightParts);\r\n\r\n  if (diagram !== null) {\r\n    diagram.commitTransaction('Double Tree Layout');\r\n  }\r\n};\r\n\r\nLineBreakLayout.prototype.createTreeLayout = function (positive) {\r\n  var lay = new go.TreeLayout();\r\n  var opts = this.topLeftOptions;\r\n  if (positive) opts = this.bottomRightOptions;\r\n  if (opts)\r\n    for (var p in opts) {\r\n      lay[p] = opts[p];\r\n    }\r\n  return lay;\r\n};\r\n\r\nLineBreakLayout.prototype.separatePartsForLayout = function (\r\n  coll,\r\n  leftParts,\r\n  rightParts\r\n) {\r\n  var root = null; // the one root\r\n  var roots = new go.Set(); // in case there are multiple roots\r\n  coll.each(function (node) {\r\n    if (node instanceof go.Node && node.findTreeParentNode() === null)\r\n      roots.add(node);\r\n  });\r\n  if (roots.count === 0) {\r\n    // just choose the first node as the root\r\n    var it = coll.iterator;\r\n    while (it.next()) {\r\n      if (it.value instanceof go.Node) {\r\n        root = it.value;\r\n        break;\r\n      }\r\n    }\r\n  } else if (roots.count === 1) {\r\n    // normal case: just one root node\r\n    root = roots.first();\r\n  } else {\r\n    // multiple root nodes -- create a dummy node to be the one real root\r\n    root = new go.Node(); // the new root node\r\n    root.location = new go.Point(0, 0);\r\n    var forwards = this.diagram ? this.diagram.isTreePathToChildren : true;\r\n    // now make dummy links from the one root node to each node\r\n    roots.each(function (child) {\r\n      var link = new go.Link();\r\n      if (forwards) {\r\n        link.fromNode = root;\r\n        link.toNode = child;\r\n      } else {\r\n        link.fromNode = child;\r\n        link.toNode = root;\r\n      }\r\n    });\r\n  }\r\n\r\n  // the ROOT node is shared by both subtrees\r\n  leftParts.add(root);\r\n  rightParts.add(root);\r\n  var lay = this;\r\n  // look at all of the immediate children of the ROOT node\r\n  root.findTreeChildrenNodes().each(function (child) {\r\n    // in what direction is this child growing?\r\n    // var bottomright = lay.isPositiveDirection(child);\r\n    var coll = rightParts;\r\n    // add the whole subtree starting with this child node\r\n    coll.addAll(child.findTreeParts());\r\n    // and also add the link from the ROOT node to this child node\r\n    coll.add(child.findTreeParentLink());\r\n  });\r\n};\r\n\r\nexport default LineBreakLayout;\r\n","E:\\github\\gojs-layout-test\\src\\App2.js",[],"E:\\github\\gojs-layout-test\\src\\SwimLaneLayout.js",["50","51","52","53","54"],{"ruleId":"55","severity":1,"message":"56","line":5,"column":8,"nodeType":"57","messageId":"58","endLine":5,"endColumn":24},{"ruleId":"55","severity":1,"message":"59","line":6,"column":8,"nodeType":"57","messageId":"58","endLine":6,"endColumn":24},{"ruleId":"55","severity":1,"message":"60","line":7,"column":8,"nodeType":"57","messageId":"58","endLine":7,"endColumn":22},{"ruleId":"55","severity":1,"message":"61","line":4,"column":8,"nodeType":"57","messageId":"58","endLine":4,"endColumn":11},{"ruleId":"62","severity":1,"message":"63","line":242,"column":11,"nodeType":"57","messageId":"64","endLine":242,"endColumn":15},{"ruleId":"62","severity":1,"message":"65","line":269,"column":9,"nodeType":"57","messageId":"64","endLine":269,"endColumn":11},{"ruleId":"62","severity":1,"message":"63","line":271,"column":11,"nodeType":"57","messageId":"64","endLine":271,"endColumn":15},{"ruleId":"62","severity":1,"message":"65","line":303,"column":9,"nodeType":"57","messageId":"64","endLine":303,"endColumn":11},{"ruleId":"62","severity":1,"message":"63","line":305,"column":11,"nodeType":"57","messageId":"64","endLine":305,"endColumn":15},{"ruleId":"55","severity":1,"message":"66","line":163,"column":7,"nodeType":"57","messageId":"58","endLine":163,"endColumn":10},{"ruleId":"62","severity":1,"message":"67","line":361,"column":14,"nodeType":"57","messageId":"64","endLine":361,"endColumn":15},{"ruleId":"62","severity":1,"message":"67","line":383,"column":16,"nodeType":"57","messageId":"64","endLine":383,"endColumn":17},{"ruleId":"62","severity":1,"message":"67","line":430,"column":14,"nodeType":"57","messageId":"64","endLine":430,"endColumn":15},{"ruleId":"62","severity":1,"message":"67","line":435,"column":14,"nodeType":"57","messageId":"64","endLine":435,"endColumn":15},{"ruleId":"62","severity":1,"message":"68","line":436,"column":11,"nodeType":"57","messageId":"64","endLine":436,"endColumn":15},"no-unused-vars","'SerpentineLayout' is defined but never used.","Identifier","unusedVar","'DoubleTreeLayout' is defined but never used.","'ParallelLayout' is defined but never used.","'App' is defined but never used.","no-redeclare","'link' is already defined.","redeclared","'it' is already defined.","'lay' is assigned a value but never used.","'i' is already defined.","'lane' is already defined."]